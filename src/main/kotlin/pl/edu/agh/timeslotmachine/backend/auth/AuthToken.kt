package pl.edu.agh.timeslotmachine.backend.auth

import jakarta.persistence.*
import pl.edu.agh.timeslotmachine.backend.core.EID
import pl.edu.agh.timeslotmachine.backend.core.EntityObject
import pl.edu.agh.timeslotmachine.backend.user.User
import java.time.LocalDateTime
import java.util.UUID

@Entity
open class AuthToken(
    @ManyToOne
    @JoinColumn(name = "user_id")
    open val user: User,

    open val expiryDate: LocalDateTime,

    // the token is generated by the database automatically,
    // so after insertion, the entity should be refreshed
    // in order to get the generated token
    @Column(insertable = false, updatable = false)
    open val token: UUID = UUID(0, 0),

    @Id
    @SequenceGenerator(name = "auth_token_id_seq", sequenceName = "auth_token_id_seq", allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "auth_token_id_seq")
    override var id: EID? = null
) : EntityObject() {
    fun isExpired() =
        expiryDate.isBefore(LocalDateTime.now())
}